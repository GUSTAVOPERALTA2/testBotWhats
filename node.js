const { Client, RemoteAuth } = require('whatsapp-web.js');
const { initializeApp, cert } = require('firebase-admin/app');
const { getFirestore } = require('firebase-admin/firestore');

// Cargar credenciales de Firebase
const serviceAccount = require('./firebase_credentials.json');

// Inicializar Firebase
initializeApp({
    credential: cert(serviceAccount)
});
const db = getFirestore();

// Implementar FirestoreStore para almacenamiento de sesi√≥n
class FirestoreStore {
    constructor(db, collectionName = 'wwebjs_sessions') {
        this.collection = db.collection(collectionName);
    }

    async get(session) {
        console.log(`[FirestoreStore] üîç Buscando sesi√≥n en Firestore: ${session}`);
        const doc = await this.collection.doc(session).get();
        if (doc.exists) {
            console.log(`[FirestoreStore] ‚úÖ Sesi√≥n encontrada en Firestore para: ${session}`);
            return doc.data();
        } else {
            console.warn(`[FirestoreStore] ‚ùå No se encontr√≥ sesi√≥n en Firestore para: ${session}`);
            return null;
        }
    }

    async set(session, data) {
        console.log(`[FirestoreStore] üîÑ Intentando guardar sesi√≥n en Firestore: ${session}`);
        console.log(`[FirestoreStore] üìÇ Datos que intentamos guardar:`, JSON.stringify(data, null, 2));
        try {
            await this.collection.doc(session).set(data, { merge: true });
            console.log(`[FirestoreStore] ‚úÖ Sesi√≥n guardada con √©xito en Firestore.`);
        } catch (error) {
            console.error(`[FirestoreStore] ‚ùå Error guardando sesi√≥n en Firestore:`, error);
        }
    }

    async remove(session) {
        console.log(`[FirestoreStore] üóë Eliminando sesi√≥n en Firestore: ${session}`);
        await this.collection.doc(session).delete();
    }

    async sessionExists({ session }) {
        console.log(`[FirestoreStore] üîç Verificando existencia de sesi√≥n en Firestore: ${session}`);
        const doc = await this.collection.doc(session).get();
        return doc.exists;
    }
}

// Crear una instancia del FirestoreStore
const store = new FirestoreStore(db);

// Configuraci√≥n del cliente de WhatsApp con RemoteAuth y FirestoreStore
const client = new Client({
    authStrategy: new RemoteAuth({
        clientId: 'vicebot-test', // Identificador √∫nico para la sesi√≥n
        store: store, // Usar FirestoreStore como almacenamiento de sesi√≥n
        backupSyncIntervalMs: 60000, // Guardar la sesi√≥n cada 1 minuto
    }),
    puppeteer: {
        headless: true, // Para producci√≥n, debe ser true
        args: ['--no-sandbox', '--disable-setuid-sandbox'],
    }
});

// Eventos del cliente
client.on('qr', (qr) => {
    console.warn("[Auth] üìå Escanea este QR en WhatsApp para iniciar sesi√≥n:");
});

client.on('ready', () => {
    console.log('[Auth] ‚úÖ Bot de WhatsApp conectado y autenticado correctamente.');
});

client.on('authenticated', () => {
    console.log("[Auth] ‚úÖ Autenticaci√≥n exitosa. Guardando sesi√≥n en Firestore...");
});

client.on('auth_failure', (message) => {
    console.error(`[Auth] ‚ùå Error de autenticaci√≥n: ${message}`);
});

client.on('disconnected', (reason) => {
    console.warn(`[Auth] ‚ö†Ô∏è Cliente desconectado: ${reason}`);
    if (reason === 'LOGOUT') {
        console.warn("[Auth] ‚ùå Se cerr√≥ sesi√≥n. Escanea el QR nuevamente.");
    }
});

client.on('error', (error) => {
    console.error("[Auth] ‚ùå Error en el cliente:", error);
});

// Iniciar el cliente
client.initialize();
//Codigo con emokis